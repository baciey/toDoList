{"version":3,"sources":["Table.js","TableTr.js","Form.js","ToDoList.js","App.js","serviceWorker.js","index.js"],"names":["Table","props","cols","style","styles","tasks","TableTr","important","name","date","id","onClickRemove","onClickFn2","icon1","icon2","icon2Color","className","icon","size","color","onClick","Form","inputText","inputDate","inputCheckbox","onChange","error","htmlFor","value","type","checked","clear","ToDoList","state","text","checkbox","dateDone","tasksDone","handleChange","e","target","setState","dateConvert","dateString","Date","day","getDate","month","getMonth","getFullYear","addTask","trim","task","push","removeTask","array","index","splice","checkedTask","toLocaleString","substring","item","undoTask","this","map","key","faTrash","faCheckCircle","faUndoAlt","width","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c3aa08f6.chunk.js","sourcesContent":["import React from 'react';\r\n// import './css/tables.sass';\r\n\r\n\r\nconst Table = (props) => {\r\n  return (\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th >{props.cols[0]}</th>\r\n          <th >{props.cols[1]}</th>\r\n          <th style={props.styles[0]}>{props.cols[2]}</th>\r\n          <th style={props.styles[1]}>{props.cols[3]}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {props.tasks}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\n\r\nconst TableTr = (props) => {\r\n\r\n  const { important, name, date, id, onClickRemove,\r\n    onClickFn2, icon1, icon2, icon2Color } = props;\r\n  let styles;\r\n  if (important) styles = 'important';\r\n  return (\r\n    <tr>\r\n      <td className={\"left \" + styles}>{name}</td>\r\n      <td className=\"left\">{date}</td>\r\n      <td>\r\n        <FontAwesomeIcon\r\n          icon={icon1}\r\n          size=\"lg\"\r\n          color=\"silver\"\r\n        />\r\n        <div id={id}\r\n          className=\"btn\"\r\n          onClick={onClickRemove}>\r\n        </div>\r\n      </td>\r\n      <td>\r\n        <FontAwesomeIcon\r\n          icon={icon2}\r\n          size=\"lg\"\r\n          color={icon2Color}\r\n        />\r\n        <div id={id}\r\n          className=\"btn\"\r\n          onClick={onClickFn2}>\r\n        </div>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n\r\nexport default TableTr;","import React from 'react';\r\n// import './css/form.sass';\r\n\r\n\r\nconst Form = (props) => {\r\n  const { inputText, inputDate, inputCheckbox,\r\n    onChange, onClick, error } = props;\r\n  return (\r\n    <div className=\"formWrap\">\r\n      <div className=\"form\">\r\n        <div>\r\n          <label htmlFor=\"task\">Nazwa zadania:</label>\r\n          <input\r\n            value={inputText}\r\n            type=\"text\"\r\n            onChange={onChange}\r\n            id=\"task\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"date\">Wykonać do:</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"date\"\r\n            value={inputDate}\r\n            onChange={onChange} />\r\n        </div>\r\n        <div className=\"switchWrap\">\r\n          <div className=\"isImportant\">Ważne?</div>\r\n          <label className=\"switch\">\r\n            <input\r\n              type=\"checkbox\"\r\n              className=\"checkbox\"\r\n              onChange={onChange}\r\n              checked={inputCheckbox}\r\n            />\r\n            <span className=\"slider\"></span>\r\n          </label>\r\n        </div>\r\n        <div style={{ clear: 'both' }}></div>\r\n        <button className=\"btnAdd\" onClick={onClick} >Dodaj</button>\r\n        <div className=\"error\">{error}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Form;","import React, { Component } from 'react';\r\nimport './css/todolist.sass';\r\n\r\n\r\nimport { faCheckCircle, faUndoAlt, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport Table from './Table'\r\nimport TableTr from './TableTr'\r\nimport Form from './Form'\r\n\r\n\r\n\r\n\r\nclass ToDoList extends Component {\r\n  state = {\r\n    text: '',\r\n    checkbox: false,\r\n    date: '',\r\n    tasks: [{\r\n      name: 'zrobić zakupy',\r\n      date: '01.02.2019',\r\n      dateDone: '',\r\n      important: true\r\n    }],\r\n    tasksDone: [{\r\n      name: 'wyprasować koszule',\r\n      date: '05.05.2020',\r\n      dateDone: '06.06.2020',\r\n      important: false\r\n    }],\r\n    error: \"\",\r\n\r\n  }\r\n\r\n\r\n  handleChange = (e) => {\r\n    const target = e.target;\r\n    const value = target.type === 'checkbox' ?\r\n      target.checked : target.value;\r\n    const name = target.type\r\n    this.setState({ [name]: value })\r\n  }\r\n  //DATE\r\n  dateConvert = () => {\r\n    let date = this.state.date;\r\n    if (date === '') return date = 'kiedykolwiek'\r\n    const dateString = new Date(date);\r\n    let day = dateString.getDate();\r\n    let month = dateString.getMonth() + 1;\r\n    let year = dateString.getFullYear();\r\n    if (day < 10) day = '0' + day;\r\n    if (month < 10) month = '0' + month;\r\n    return date = day + '.' + month + '.' + year;\r\n  }\r\n\r\n  addTask = () => {\r\n    const text = this.state.text;\r\n    const checkbox = this.state.checkbox;\r\n    const date = this.dateConvert();\r\n    if (text.trim() === '') return this.setState({ error: 'nie podano nazwy zadania' })\r\n    let tasks = [...this.state.tasks]\r\n    const task = { name: text, date: date, important: checkbox }\r\n    tasks.push(task)\r\n    this.setState({ tasks, text: '', checkbox: false, error: '' })\r\n  }\r\n  removeTask = (array, e) => {\r\n    let tasks;\r\n    if (array === 'tasks') tasks = [...this.state.tasks];\r\n    else if (array === 'tasksDone') tasks = [...this.state.tasksDone];\r\n    const index = e.target.id;\r\n    tasks.splice(index, 1)\r\n    this.setState({ [array]: tasks })\r\n  }\r\n  checkedTask = (e) => {\r\n    let date = new Date();\r\n    date = date.toLocaleString().substring(0, 10);\r\n\r\n    let tasks = [...this.state.tasks];\r\n    const index = e.target.id;\r\n    const item = tasks.splice(index, 1)\r\n    let tasksDone = [...this.state.tasksDone];\r\n    item[0].dateDone = date;\r\n    tasksDone.push(item[0])\r\n    this.setState({ tasksDone, tasks })\r\n  }\r\n\r\n  undoTask = (e) => {\r\n    let tasksDone = [...this.state.tasksDone];\r\n    const index = e.target.id;\r\n    const item = tasksDone.splice(index, 1)\r\n    let tasks = [...this.state.tasks];\r\n    tasks.push(item[0])\r\n    this.setState({ tasks, tasksDone })\r\n  }\r\n\r\n  render() {\r\n    //FIRST TABLE\r\n    let tasks = [...this.state.tasks];\r\n    tasks = tasks.map((task, index) =>\r\n      <TableTr\r\n        key={index}\r\n        id={index}\r\n        important={task.important}\r\n        name={task.name}\r\n        date={task.date}\r\n        onClickRemove={(e) => this.removeTask('tasks', e)}\r\n        onClickFn2={this.checkedTask}\r\n        icon1={faTrash}\r\n        icon2={faCheckCircle}\r\n        icon2Color=\"lightgreen\"\r\n      />\r\n    )\r\n    //SECOND TABLE\r\n    let tasksDone = [...this.state.tasksDone]\r\n    tasksDone = tasksDone.map((task, index) =>\r\n      <TableTr\r\n        key={index}\r\n        id={index}\r\n        important={task.important}\r\n        name={task.name}\r\n        date={task.dateDone}\r\n        onClickRemove={(e) => this.removeTask('tasksDone', e)}\r\n        onClickFn2={this.undoTask}\r\n        icon1={faTrash}\r\n        icon2={faUndoAlt}\r\n      />\r\n    )\r\n    //RETURN\r\n    return (\r\n      <div className=\"containerToDo\">\r\n        <Form\r\n          inputText={this.state.text}\r\n          inputDate={this.state.date}\r\n          inputCheckbox={this.state.checkbox}\r\n          onChange={this.handleChange}\r\n          onClick={this.addTask}\r\n          error={this.state.error}\r\n        />\r\n        <div className=\"tasks\">\r\n          <h3>Lista zadań</h3>\r\n          <Table\r\n            cols={['zadanie', 'do kiedy', 'usuń', 'zrobione']}\r\n            tasks={tasks}\r\n            styles={[{ width: '40px' }, { width: '70px' }]}\r\n          />\r\n        </div>\r\n        <div className=\"tasks\">\r\n          <h3>Zadania zrobione</h3>\r\n          <Table\r\n            cols={['zadanie', 'wykonano', 'usuń', 'cofnij']}\r\n            tasks={tasksDone}\r\n            styles={[{ width: '40px' }, { width: '50px' }]}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;","import React from 'react';\nimport ToDoList from './ToDoList'\n\n\n\n\nfunction App() {\n  return (\n    <ToDoList />\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}